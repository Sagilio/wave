syntax = "proto3";
//Version 1.0
package pb;

service WAVE {
  //Create a new WAVE entity, but do not publish it
  rpc CreateEntity(CreateEntityParams) returns (CreateEntityResponse);
  //Create a WAVE attestation, both the source and destination entities must
  //be published
  rpc CreateAttestation(CreateAttestationParams) returns (CreateAttestationResponse);
  //Publish the given entity
  rpc PublishEntity(PublishEntityParams) returns (PublishEntityResponse);
  //Publish an attestation
  rpc PublishAttestation(PublishAttestationParams) returns (PublishAttestationResponse);
  //Add an attestation to the given perspective graph
  rpc AddAttestation(AddAttestationParams) returns (AddAttestationResponse);
  rpc LookupAttestations(LookupAttestationsParams) returns (LookupAttestationsResponse);
  rpc ResyncPerspectiveGraph(ResyncPerspectiveGraphParams) returns (ResyncPerspectiveGraphResponse);
  rpc SyncStatus(SyncParams) returns (SyncResponse);
  rpc WaitForSyncComplete(SyncParams) returns (stream SyncResponse);
}

message CreateEntityParams {
  //Milliseconds since the epoch
  int64 validFrom = 1;
  int64 validUntil = 2;
  Location revocationLocation = 3;
  string SecretPassphrase = 4;
}
message CreateEntityResponse {
  Error error = 1;
  bytes PublicDER = 2;
  bytes SecretDER = 3;
}
message CreateAttestationParams {
  Perspective perspective = 1;
  string bodyScheme = 2;
  bytes subjectHash = 3;
  Location subjectLocation = 4;
  //If 0, will be set to time.Now
  int64 validFrom = 5;
  //If 0, will be set to some arbitrary default
  int64 validUntil = 6;
  Policy policy = 7;
}
message ResyncPerspectiveGraphParams {
  Perspective perspective = 1;
}
message ResyncPerspectiveGraphResponse {
  Error error = 1;
}
message SyncParams {
  Perspective perspective = 1;
}
message SyncResponse {
  Error error = 1;
  map<string, StorageDriverStatus> storageStatus = 2;
	int64 totalSyncRequests = 3;
	int64 completedSyncs = 4;
}
message StorageDriverStatus {
  bool operational = 1;
  map<string, string> info = 2;
}
message CreateAttestationResponse {
  Error error = 1;
  bytes DER = 2;
  bytes verifierKey = 3;
  bytes proverKey = 4;
}
message PublishEntityParams {
  bytes DER = 1;
  Location location = 2;
}
message PublishEntityResponse {
  Error error = 1;
  bytes hash = 2;
}
message PublishAttestationParams {
  bytes DER = 1;
  Location location = 2;
}
message PublishAttestationResponse {
  Error error = 1;
  bytes hash = 2;
}
message AddAttestationParams {
  Perspective perspective = 1;
  bytes DER = 2;
  bytes proverKey = 3;
}
message AddAttestationResponse {
  Error error = 1;
}
message LookupAttestationsParams {
  Perspective perspective = 1;
  bytes fromEntity = 2;
  bytes toEntity = 3;
}
message LookupAttestationsResponse {
  Error error = 1;
  repeated Attestation results = 2;
}

message Error {
  int32 code = 1;
  string message = 2;
}
message Perspective {
  EntitySecret entitySecret = 1;
  Location location = 2;
}
message Location {
  //One of the following
  LocationURI locationURI = 1;
}
message LocationURI {
  string URI = 1;
  int32 version = 2;
}
message EntitySecret {
  bytes DER = 1;
  bytes passphrase = 2;
}
message Attestation {
  bytes DER = 1;
  bytes hash = 2;
  AttestationBody body = 3;
  bytes verifierKey = 4;
  bytes proverKey = 5;
  bytes subjectHash = 6;
  Location subjectLocation = 7;
  AttestationValidity validity = 8;
}

message AttestationBody {
  bytes DecodedBodyDER = 1;
  bytes attesterHash = 2;
  Location attesterLocation = 3;
  Policy policy = 4;
  int64 validFrom = 5;
  int64 validUntil = 6;
}

message AttestationValidity {
  bool valid = 1;
  bool revoked = 2;
  bool expired = 3;
  bool malformed = 4;
  bool notDecrypted = 5;
  bool srcInvalid = 6;
  bool dstInvalid = 7;
  string message = 8;
}
message Policy {
  TrustLevelPolicy trustLevelPolicy = 1;
  RTreePolicy rTreePolicy = 2;
}
message TrustLevelPolicy {
  int32 trust = 1;
}
message RTreePolicy {
  bytes namespace = 1;
  uint32 indirections = 2;
  repeated RTreePolicyStatement statements = 3;
  repeated bytes visibilityURI = 4;
}
message RTreePolicyStatement {
  bytes permissionSet = 1;
  repeated string permissions = 2;
  string resource = 3;
}
