// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eapi.proto

/*
Package pb is a generated protocol buffer package.

Version 1.0

It is generated from these files:
	eapi.proto

It has these top-level messages:
	CreateEntityParams
	CreateEntityResponse
	CreateAttestationParams
	ResyncPerspectiveGraphParams
	ResyncPerspectiveGraphResponse
	SyncParams
	SyncResponse
	StorageDriverStatus
	CreateAttestationResponse
	PublishEntityParams
	PublishEntityResponse
	PublishAttestationParams
	PublishAttestationResponse
	AddAttestationParams
	AddAttestationResponse
	LookupAttestationsParams
	LookupAttestationsResponse
	Error
	Perspective
	Location
	LocationURI
	EntitySecret
	Attestation
	AttestationBody
	AttestationValidity
	Policy
	TrustLevelPolicy
	RTreePolicy
	RTreePolicyStatement
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateEntityParams struct {
	// Milliseconds since the epoch
	ValidFrom          int64     `protobuf:"varint,1,opt,name=validFrom" json:"validFrom,omitempty"`
	ValidUntil         int64     `protobuf:"varint,2,opt,name=validUntil" json:"validUntil,omitempty"`
	RevocationLocation *Location `protobuf:"bytes,3,opt,name=revocationLocation" json:"revocationLocation,omitempty"`
	SecretPassphrase   string    `protobuf:"bytes,4,opt,name=SecretPassphrase,json=secretPassphrase" json:"SecretPassphrase,omitempty"`
}

func (m *CreateEntityParams) Reset()                    { *m = CreateEntityParams{} }
func (m *CreateEntityParams) String() string            { return proto.CompactTextString(m) }
func (*CreateEntityParams) ProtoMessage()               {}
func (*CreateEntityParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateEntityParams) GetValidFrom() int64 {
	if m != nil {
		return m.ValidFrom
	}
	return 0
}

func (m *CreateEntityParams) GetValidUntil() int64 {
	if m != nil {
		return m.ValidUntil
	}
	return 0
}

func (m *CreateEntityParams) GetRevocationLocation() *Location {
	if m != nil {
		return m.RevocationLocation
	}
	return nil
}

func (m *CreateEntityParams) GetSecretPassphrase() string {
	if m != nil {
		return m.SecretPassphrase
	}
	return ""
}

type CreateEntityResponse struct {
	Error     *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PublicDER []byte `protobuf:"bytes,2,opt,name=PublicDER,json=publicDER,proto3" json:"PublicDER,omitempty"`
	SecretDER []byte `protobuf:"bytes,3,opt,name=SecretDER,json=secretDER,proto3" json:"SecretDER,omitempty"`
}

func (m *CreateEntityResponse) Reset()                    { *m = CreateEntityResponse{} }
func (m *CreateEntityResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateEntityResponse) ProtoMessage()               {}
func (*CreateEntityResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateEntityResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *CreateEntityResponse) GetPublicDER() []byte {
	if m != nil {
		return m.PublicDER
	}
	return nil
}

func (m *CreateEntityResponse) GetSecretDER() []byte {
	if m != nil {
		return m.SecretDER
	}
	return nil
}

type CreateAttestationParams struct {
	Perspective     *Perspective `protobuf:"bytes,1,opt,name=perspective" json:"perspective,omitempty"`
	BodyScheme      string       `protobuf:"bytes,2,opt,name=bodyScheme" json:"bodyScheme,omitempty"`
	SubjectHash     []byte       `protobuf:"bytes,3,opt,name=subjectHash,proto3" json:"subjectHash,omitempty"`
	SubjectLocation *Location    `protobuf:"bytes,4,opt,name=subjectLocation" json:"subjectLocation,omitempty"`
	// If 0, will be set to time.Now
	ValidFrom int64 `protobuf:"varint,5,opt,name=validFrom" json:"validFrom,omitempty"`
	// If 0, will be set to some arbitrary default
	ValidUntil int64   `protobuf:"varint,6,opt,name=validUntil" json:"validUntil,omitempty"`
	Policy     *Policy `protobuf:"bytes,7,opt,name=policy" json:"policy,omitempty"`
}

func (m *CreateAttestationParams) Reset()                    { *m = CreateAttestationParams{} }
func (m *CreateAttestationParams) String() string            { return proto.CompactTextString(m) }
func (*CreateAttestationParams) ProtoMessage()               {}
func (*CreateAttestationParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateAttestationParams) GetPerspective() *Perspective {
	if m != nil {
		return m.Perspective
	}
	return nil
}

func (m *CreateAttestationParams) GetBodyScheme() string {
	if m != nil {
		return m.BodyScheme
	}
	return ""
}

func (m *CreateAttestationParams) GetSubjectHash() []byte {
	if m != nil {
		return m.SubjectHash
	}
	return nil
}

func (m *CreateAttestationParams) GetSubjectLocation() *Location {
	if m != nil {
		return m.SubjectLocation
	}
	return nil
}

func (m *CreateAttestationParams) GetValidFrom() int64 {
	if m != nil {
		return m.ValidFrom
	}
	return 0
}

func (m *CreateAttestationParams) GetValidUntil() int64 {
	if m != nil {
		return m.ValidUntil
	}
	return 0
}

func (m *CreateAttestationParams) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type ResyncPerspectiveGraphParams struct {
	Perspective *Perspective `protobuf:"bytes,1,opt,name=perspective" json:"perspective,omitempty"`
}

func (m *ResyncPerspectiveGraphParams) Reset()                    { *m = ResyncPerspectiveGraphParams{} }
func (m *ResyncPerspectiveGraphParams) String() string            { return proto.CompactTextString(m) }
func (*ResyncPerspectiveGraphParams) ProtoMessage()               {}
func (*ResyncPerspectiveGraphParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ResyncPerspectiveGraphParams) GetPerspective() *Perspective {
	if m != nil {
		return m.Perspective
	}
	return nil
}

type ResyncPerspectiveGraphResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *ResyncPerspectiveGraphResponse) Reset()                    { *m = ResyncPerspectiveGraphResponse{} }
func (m *ResyncPerspectiveGraphResponse) String() string            { return proto.CompactTextString(m) }
func (*ResyncPerspectiveGraphResponse) ProtoMessage()               {}
func (*ResyncPerspectiveGraphResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ResyncPerspectiveGraphResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type SyncParams struct {
	Perspective *Perspective `protobuf:"bytes,1,opt,name=perspective" json:"perspective,omitempty"`
}

func (m *SyncParams) Reset()                    { *m = SyncParams{} }
func (m *SyncParams) String() string            { return proto.CompactTextString(m) }
func (*SyncParams) ProtoMessage()               {}
func (*SyncParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SyncParams) GetPerspective() *Perspective {
	if m != nil {
		return m.Perspective
	}
	return nil
}

type SyncResponse struct {
	Error             *Error                          `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	StorageStatus     map[string]*StorageDriverStatus `protobuf:"bytes,2,rep,name=storageStatus" json:"storageStatus,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TotalSyncRequests int64                           `protobuf:"varint,3,opt,name=totalSyncRequests" json:"totalSyncRequests,omitempty"`
	CompletedSyncs    int64                           `protobuf:"varint,4,opt,name=completedSyncs" json:"completedSyncs,omitempty"`
}

func (m *SyncResponse) Reset()                    { *m = SyncResponse{} }
func (m *SyncResponse) String() string            { return proto.CompactTextString(m) }
func (*SyncResponse) ProtoMessage()               {}
func (*SyncResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SyncResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *SyncResponse) GetStorageStatus() map[string]*StorageDriverStatus {
	if m != nil {
		return m.StorageStatus
	}
	return nil
}

func (m *SyncResponse) GetTotalSyncRequests() int64 {
	if m != nil {
		return m.TotalSyncRequests
	}
	return 0
}

func (m *SyncResponse) GetCompletedSyncs() int64 {
	if m != nil {
		return m.CompletedSyncs
	}
	return 0
}

type StorageDriverStatus struct {
	Operational bool              `protobuf:"varint,1,opt,name=operational" json:"operational,omitempty"`
	Info        map[string]string `protobuf:"bytes,2,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StorageDriverStatus) Reset()                    { *m = StorageDriverStatus{} }
func (m *StorageDriverStatus) String() string            { return proto.CompactTextString(m) }
func (*StorageDriverStatus) ProtoMessage()               {}
func (*StorageDriverStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *StorageDriverStatus) GetOperational() bool {
	if m != nil {
		return m.Operational
	}
	return false
}

func (m *StorageDriverStatus) GetInfo() map[string]string {
	if m != nil {
		return m.Info
	}
	return nil
}

type CreateAttestationResponse struct {
	Error       *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	DER         []byte `protobuf:"bytes,2,opt,name=DER,json=dER,proto3" json:"DER,omitempty"`
	VerifierKey []byte `protobuf:"bytes,3,opt,name=verifierKey,proto3" json:"verifierKey,omitempty"`
	ProverKey   []byte `protobuf:"bytes,4,opt,name=proverKey,proto3" json:"proverKey,omitempty"`
}

func (m *CreateAttestationResponse) Reset()                    { *m = CreateAttestationResponse{} }
func (m *CreateAttestationResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateAttestationResponse) ProtoMessage()               {}
func (*CreateAttestationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateAttestationResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *CreateAttestationResponse) GetDER() []byte {
	if m != nil {
		return m.DER
	}
	return nil
}

func (m *CreateAttestationResponse) GetVerifierKey() []byte {
	if m != nil {
		return m.VerifierKey
	}
	return nil
}

func (m *CreateAttestationResponse) GetProverKey() []byte {
	if m != nil {
		return m.ProverKey
	}
	return nil
}

type PublishEntityParams struct {
	DER      []byte    `protobuf:"bytes,1,opt,name=DER,json=dER,proto3" json:"DER,omitempty"`
	Location *Location `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
}

func (m *PublishEntityParams) Reset()                    { *m = PublishEntityParams{} }
func (m *PublishEntityParams) String() string            { return proto.CompactTextString(m) }
func (*PublishEntityParams) ProtoMessage()               {}
func (*PublishEntityParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PublishEntityParams) GetDER() []byte {
	if m != nil {
		return m.DER
	}
	return nil
}

func (m *PublishEntityParams) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

type PublishEntityResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Hash  []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *PublishEntityResponse) Reset()                    { *m = PublishEntityResponse{} }
func (m *PublishEntityResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishEntityResponse) ProtoMessage()               {}
func (*PublishEntityResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PublishEntityResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *PublishEntityResponse) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type PublishAttestationParams struct {
	DER      []byte    `protobuf:"bytes,1,opt,name=DER,json=dER,proto3" json:"DER,omitempty"`
	Location *Location `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
}

func (m *PublishAttestationParams) Reset()                    { *m = PublishAttestationParams{} }
func (m *PublishAttestationParams) String() string            { return proto.CompactTextString(m) }
func (*PublishAttestationParams) ProtoMessage()               {}
func (*PublishAttestationParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PublishAttestationParams) GetDER() []byte {
	if m != nil {
		return m.DER
	}
	return nil
}

func (m *PublishAttestationParams) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

type PublishAttestationResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Hash  []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *PublishAttestationResponse) Reset()                    { *m = PublishAttestationResponse{} }
func (m *PublishAttestationResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishAttestationResponse) ProtoMessage()               {}
func (*PublishAttestationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PublishAttestationResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *PublishAttestationResponse) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type AddAttestationParams struct {
	Perspective *Perspective `protobuf:"bytes,1,opt,name=perspective" json:"perspective,omitempty"`
	DER         []byte       `protobuf:"bytes,2,opt,name=DER,json=dER,proto3" json:"DER,omitempty"`
	ProverKey   []byte       `protobuf:"bytes,3,opt,name=proverKey,proto3" json:"proverKey,omitempty"`
}

func (m *AddAttestationParams) Reset()                    { *m = AddAttestationParams{} }
func (m *AddAttestationParams) String() string            { return proto.CompactTextString(m) }
func (*AddAttestationParams) ProtoMessage()               {}
func (*AddAttestationParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AddAttestationParams) GetPerspective() *Perspective {
	if m != nil {
		return m.Perspective
	}
	return nil
}

func (m *AddAttestationParams) GetDER() []byte {
	if m != nil {
		return m.DER
	}
	return nil
}

func (m *AddAttestationParams) GetProverKey() []byte {
	if m != nil {
		return m.ProverKey
	}
	return nil
}

type AddAttestationResponse struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *AddAttestationResponse) Reset()                    { *m = AddAttestationResponse{} }
func (m *AddAttestationResponse) String() string            { return proto.CompactTextString(m) }
func (*AddAttestationResponse) ProtoMessage()               {}
func (*AddAttestationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AddAttestationResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type LookupAttestationsParams struct {
	Perspective *Perspective `protobuf:"bytes,1,opt,name=perspective" json:"perspective,omitempty"`
	FromEntity  []byte       `protobuf:"bytes,2,opt,name=fromEntity,proto3" json:"fromEntity,omitempty"`
	ToEntity    []byte       `protobuf:"bytes,3,opt,name=toEntity,proto3" json:"toEntity,omitempty"`
}

func (m *LookupAttestationsParams) Reset()                    { *m = LookupAttestationsParams{} }
func (m *LookupAttestationsParams) String() string            { return proto.CompactTextString(m) }
func (*LookupAttestationsParams) ProtoMessage()               {}
func (*LookupAttestationsParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *LookupAttestationsParams) GetPerspective() *Perspective {
	if m != nil {
		return m.Perspective
	}
	return nil
}

func (m *LookupAttestationsParams) GetFromEntity() []byte {
	if m != nil {
		return m.FromEntity
	}
	return nil
}

func (m *LookupAttestationsParams) GetToEntity() []byte {
	if m != nil {
		return m.ToEntity
	}
	return nil
}

type LookupAttestationsResponse struct {
	Error   *Error         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Results []*Attestation `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *LookupAttestationsResponse) Reset()                    { *m = LookupAttestationsResponse{} }
func (m *LookupAttestationsResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupAttestationsResponse) ProtoMessage()               {}
func (*LookupAttestationsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *LookupAttestationsResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *LookupAttestationsResponse) GetResults() []*Attestation {
	if m != nil {
		return m.Results
	}
	return nil
}

type Error struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Perspective struct {
	EntitySecret *EntitySecret `protobuf:"bytes,1,opt,name=entitySecret" json:"entitySecret,omitempty"`
	Location     *Location     `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
}

func (m *Perspective) Reset()                    { *m = Perspective{} }
func (m *Perspective) String() string            { return proto.CompactTextString(m) }
func (*Perspective) ProtoMessage()               {}
func (*Perspective) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Perspective) GetEntitySecret() *EntitySecret {
	if m != nil {
		return m.EntitySecret
	}
	return nil
}

func (m *Perspective) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

type Location struct {
	// One of the following
	LocationURI *LocationURI `protobuf:"bytes,1,opt,name=locationURI" json:"locationURI,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Location) GetLocationURI() *LocationURI {
	if m != nil {
		return m.LocationURI
	}
	return nil
}

type LocationURI struct {
	URI     string `protobuf:"bytes,1,opt,name=URI,json=uRI" json:"URI,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *LocationURI) Reset()                    { *m = LocationURI{} }
func (m *LocationURI) String() string            { return proto.CompactTextString(m) }
func (*LocationURI) ProtoMessage()               {}
func (*LocationURI) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *LocationURI) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (m *LocationURI) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type EntitySecret struct {
	DER        []byte `protobuf:"bytes,1,opt,name=DER,json=dER,proto3" json:"DER,omitempty"`
	Passphrase []byte `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (m *EntitySecret) Reset()                    { *m = EntitySecret{} }
func (m *EntitySecret) String() string            { return proto.CompactTextString(m) }
func (*EntitySecret) ProtoMessage()               {}
func (*EntitySecret) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *EntitySecret) GetDER() []byte {
	if m != nil {
		return m.DER
	}
	return nil
}

func (m *EntitySecret) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

type Attestation struct {
	DER             []byte               `protobuf:"bytes,1,opt,name=DER,json=dER,proto3" json:"DER,omitempty"`
	Hash            []byte               `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Body            *AttestationBody     `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	VerifierKey     []byte               `protobuf:"bytes,4,opt,name=verifierKey,proto3" json:"verifierKey,omitempty"`
	ProverKey       []byte               `protobuf:"bytes,5,opt,name=proverKey,proto3" json:"proverKey,omitempty"`
	SubjectHash     []byte               `protobuf:"bytes,6,opt,name=subjectHash,proto3" json:"subjectHash,omitempty"`
	SubjectLocation *Location            `protobuf:"bytes,7,opt,name=subjectLocation" json:"subjectLocation,omitempty"`
	Validity        *AttestationValidity `protobuf:"bytes,8,opt,name=validity" json:"validity,omitempty"`
}

func (m *Attestation) Reset()                    { *m = Attestation{} }
func (m *Attestation) String() string            { return proto.CompactTextString(m) }
func (*Attestation) ProtoMessage()               {}
func (*Attestation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Attestation) GetDER() []byte {
	if m != nil {
		return m.DER
	}
	return nil
}

func (m *Attestation) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Attestation) GetBody() *AttestationBody {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Attestation) GetVerifierKey() []byte {
	if m != nil {
		return m.VerifierKey
	}
	return nil
}

func (m *Attestation) GetProverKey() []byte {
	if m != nil {
		return m.ProverKey
	}
	return nil
}

func (m *Attestation) GetSubjectHash() []byte {
	if m != nil {
		return m.SubjectHash
	}
	return nil
}

func (m *Attestation) GetSubjectLocation() *Location {
	if m != nil {
		return m.SubjectLocation
	}
	return nil
}

func (m *Attestation) GetValidity() *AttestationValidity {
	if m != nil {
		return m.Validity
	}
	return nil
}

type AttestationBody struct {
	DecodedBodyDER   []byte    `protobuf:"bytes,1,opt,name=DecodedBodyDER,json=decodedBodyDER,proto3" json:"DecodedBodyDER,omitempty"`
	AttesterHash     []byte    `protobuf:"bytes,2,opt,name=attesterHash,proto3" json:"attesterHash,omitempty"`
	AttesterLocation *Location `protobuf:"bytes,3,opt,name=attesterLocation" json:"attesterLocation,omitempty"`
	Policy           *Policy   `protobuf:"bytes,4,opt,name=policy" json:"policy,omitempty"`
	ValidFrom        int64     `protobuf:"varint,5,opt,name=validFrom" json:"validFrom,omitempty"`
	ValidUntil       int64     `protobuf:"varint,6,opt,name=validUntil" json:"validUntil,omitempty"`
}

func (m *AttestationBody) Reset()                    { *m = AttestationBody{} }
func (m *AttestationBody) String() string            { return proto.CompactTextString(m) }
func (*AttestationBody) ProtoMessage()               {}
func (*AttestationBody) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *AttestationBody) GetDecodedBodyDER() []byte {
	if m != nil {
		return m.DecodedBodyDER
	}
	return nil
}

func (m *AttestationBody) GetAttesterHash() []byte {
	if m != nil {
		return m.AttesterHash
	}
	return nil
}

func (m *AttestationBody) GetAttesterLocation() *Location {
	if m != nil {
		return m.AttesterLocation
	}
	return nil
}

func (m *AttestationBody) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *AttestationBody) GetValidFrom() int64 {
	if m != nil {
		return m.ValidFrom
	}
	return 0
}

func (m *AttestationBody) GetValidUntil() int64 {
	if m != nil {
		return m.ValidUntil
	}
	return 0
}

type AttestationValidity struct {
	Valid        bool   `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Revoked      bool   `protobuf:"varint,2,opt,name=revoked" json:"revoked,omitempty"`
	Expired      bool   `protobuf:"varint,3,opt,name=expired" json:"expired,omitempty"`
	Malformed    bool   `protobuf:"varint,4,opt,name=malformed" json:"malformed,omitempty"`
	NotDecrypted bool   `protobuf:"varint,5,opt,name=notDecrypted" json:"notDecrypted,omitempty"`
	SrcInvalid   bool   `protobuf:"varint,6,opt,name=srcInvalid" json:"srcInvalid,omitempty"`
	DstInvalid   bool   `protobuf:"varint,7,opt,name=dstInvalid" json:"dstInvalid,omitempty"`
	Message      string `protobuf:"bytes,8,opt,name=message" json:"message,omitempty"`
}

func (m *AttestationValidity) Reset()                    { *m = AttestationValidity{} }
func (m *AttestationValidity) String() string            { return proto.CompactTextString(m) }
func (*AttestationValidity) ProtoMessage()               {}
func (*AttestationValidity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *AttestationValidity) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *AttestationValidity) GetRevoked() bool {
	if m != nil {
		return m.Revoked
	}
	return false
}

func (m *AttestationValidity) GetExpired() bool {
	if m != nil {
		return m.Expired
	}
	return false
}

func (m *AttestationValidity) GetMalformed() bool {
	if m != nil {
		return m.Malformed
	}
	return false
}

func (m *AttestationValidity) GetNotDecrypted() bool {
	if m != nil {
		return m.NotDecrypted
	}
	return false
}

func (m *AttestationValidity) GetSrcInvalid() bool {
	if m != nil {
		return m.SrcInvalid
	}
	return false
}

func (m *AttestationValidity) GetDstInvalid() bool {
	if m != nil {
		return m.DstInvalid
	}
	return false
}

func (m *AttestationValidity) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Policy struct {
	TrustLevelPolicy *TrustLevelPolicy `protobuf:"bytes,1,opt,name=trustLevelPolicy" json:"trustLevelPolicy,omitempty"`
	RTreePolicy      *RTreePolicy      `protobuf:"bytes,2,opt,name=rTreePolicy" json:"rTreePolicy,omitempty"`
}

func (m *Policy) Reset()                    { *m = Policy{} }
func (m *Policy) String() string            { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()               {}
func (*Policy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Policy) GetTrustLevelPolicy() *TrustLevelPolicy {
	if m != nil {
		return m.TrustLevelPolicy
	}
	return nil
}

func (m *Policy) GetRTreePolicy() *RTreePolicy {
	if m != nil {
		return m.RTreePolicy
	}
	return nil
}

type TrustLevelPolicy struct {
	Trust int32 `protobuf:"varint,1,opt,name=trust" json:"trust,omitempty"`
}

func (m *TrustLevelPolicy) Reset()                    { *m = TrustLevelPolicy{} }
func (m *TrustLevelPolicy) String() string            { return proto.CompactTextString(m) }
func (*TrustLevelPolicy) ProtoMessage()               {}
func (*TrustLevelPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *TrustLevelPolicy) GetTrust() int32 {
	if m != nil {
		return m.Trust
	}
	return 0
}

type RTreePolicy struct {
	Namespace     []byte                  `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Indirections  uint32                  `protobuf:"varint,2,opt,name=indirections" json:"indirections,omitempty"`
	Statements    []*RTreePolicyStatement `protobuf:"bytes,3,rep,name=statements" json:"statements,omitempty"`
	VisibilityURI [][]byte                `protobuf:"bytes,4,rep,name=visibilityURI,proto3" json:"visibilityURI,omitempty"`
}

func (m *RTreePolicy) Reset()                    { *m = RTreePolicy{} }
func (m *RTreePolicy) String() string            { return proto.CompactTextString(m) }
func (*RTreePolicy) ProtoMessage()               {}
func (*RTreePolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *RTreePolicy) GetNamespace() []byte {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *RTreePolicy) GetIndirections() uint32 {
	if m != nil {
		return m.Indirections
	}
	return 0
}

func (m *RTreePolicy) GetStatements() []*RTreePolicyStatement {
	if m != nil {
		return m.Statements
	}
	return nil
}

func (m *RTreePolicy) GetVisibilityURI() [][]byte {
	if m != nil {
		return m.VisibilityURI
	}
	return nil
}

type RTreePolicyStatement struct {
	PermissionSet []byte   `protobuf:"bytes,1,opt,name=permissionSet,proto3" json:"permissionSet,omitempty"`
	Permissions   []string `protobuf:"bytes,2,rep,name=permissions" json:"permissions,omitempty"`
	Resource      string   `protobuf:"bytes,3,opt,name=resource" json:"resource,omitempty"`
}

func (m *RTreePolicyStatement) Reset()                    { *m = RTreePolicyStatement{} }
func (m *RTreePolicyStatement) String() string            { return proto.CompactTextString(m) }
func (*RTreePolicyStatement) ProtoMessage()               {}
func (*RTreePolicyStatement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *RTreePolicyStatement) GetPermissionSet() []byte {
	if m != nil {
		return m.PermissionSet
	}
	return nil
}

func (m *RTreePolicyStatement) GetPermissions() []string {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *RTreePolicyStatement) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateEntityParams)(nil), "pb.CreateEntityParams")
	proto.RegisterType((*CreateEntityResponse)(nil), "pb.CreateEntityResponse")
	proto.RegisterType((*CreateAttestationParams)(nil), "pb.CreateAttestationParams")
	proto.RegisterType((*ResyncPerspectiveGraphParams)(nil), "pb.ResyncPerspectiveGraphParams")
	proto.RegisterType((*ResyncPerspectiveGraphResponse)(nil), "pb.ResyncPerspectiveGraphResponse")
	proto.RegisterType((*SyncParams)(nil), "pb.SyncParams")
	proto.RegisterType((*SyncResponse)(nil), "pb.SyncResponse")
	proto.RegisterType((*StorageDriverStatus)(nil), "pb.StorageDriverStatus")
	proto.RegisterType((*CreateAttestationResponse)(nil), "pb.CreateAttestationResponse")
	proto.RegisterType((*PublishEntityParams)(nil), "pb.PublishEntityParams")
	proto.RegisterType((*PublishEntityResponse)(nil), "pb.PublishEntityResponse")
	proto.RegisterType((*PublishAttestationParams)(nil), "pb.PublishAttestationParams")
	proto.RegisterType((*PublishAttestationResponse)(nil), "pb.PublishAttestationResponse")
	proto.RegisterType((*AddAttestationParams)(nil), "pb.AddAttestationParams")
	proto.RegisterType((*AddAttestationResponse)(nil), "pb.AddAttestationResponse")
	proto.RegisterType((*LookupAttestationsParams)(nil), "pb.LookupAttestationsParams")
	proto.RegisterType((*LookupAttestationsResponse)(nil), "pb.LookupAttestationsResponse")
	proto.RegisterType((*Error)(nil), "pb.Error")
	proto.RegisterType((*Perspective)(nil), "pb.Perspective")
	proto.RegisterType((*Location)(nil), "pb.Location")
	proto.RegisterType((*LocationURI)(nil), "pb.LocationURI")
	proto.RegisterType((*EntitySecret)(nil), "pb.EntitySecret")
	proto.RegisterType((*Attestation)(nil), "pb.Attestation")
	proto.RegisterType((*AttestationBody)(nil), "pb.AttestationBody")
	proto.RegisterType((*AttestationValidity)(nil), "pb.AttestationValidity")
	proto.RegisterType((*Policy)(nil), "pb.Policy")
	proto.RegisterType((*TrustLevelPolicy)(nil), "pb.TrustLevelPolicy")
	proto.RegisterType((*RTreePolicy)(nil), "pb.RTreePolicy")
	proto.RegisterType((*RTreePolicyStatement)(nil), "pb.RTreePolicyStatement")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WAVE service

type WAVEClient interface {
	CreateEntity(ctx context.Context, in *CreateEntityParams, opts ...grpc.CallOption) (*CreateEntityResponse, error)
	CreateAttestation(ctx context.Context, in *CreateAttestationParams, opts ...grpc.CallOption) (*CreateAttestationResponse, error)
	PublishEntity(ctx context.Context, in *PublishEntityParams, opts ...grpc.CallOption) (*PublishEntityResponse, error)
	PublishAttestation(ctx context.Context, in *PublishAttestationParams, opts ...grpc.CallOption) (*PublishAttestationResponse, error)
	AddAttestation(ctx context.Context, in *AddAttestationParams, opts ...grpc.CallOption) (*AddAttestationResponse, error)
	LookupAttestations(ctx context.Context, in *LookupAttestationsParams, opts ...grpc.CallOption) (*LookupAttestationsResponse, error)
	ResyncPerspectiveGraph(ctx context.Context, in *ResyncPerspectiveGraphParams, opts ...grpc.CallOption) (*ResyncPerspectiveGraphResponse, error)
	SyncStatus(ctx context.Context, in *SyncParams, opts ...grpc.CallOption) (*SyncResponse, error)
	WaitForSyncComplete(ctx context.Context, in *SyncParams, opts ...grpc.CallOption) (WAVE_WaitForSyncCompleteClient, error)
}

type wAVEClient struct {
	cc *grpc.ClientConn
}

func NewWAVEClient(cc *grpc.ClientConn) WAVEClient {
	return &wAVEClient{cc}
}

func (c *wAVEClient) CreateEntity(ctx context.Context, in *CreateEntityParams, opts ...grpc.CallOption) (*CreateEntityResponse, error) {
	out := new(CreateEntityResponse)
	err := grpc.Invoke(ctx, "/pb.WAVE/CreateEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAVEClient) CreateAttestation(ctx context.Context, in *CreateAttestationParams, opts ...grpc.CallOption) (*CreateAttestationResponse, error) {
	out := new(CreateAttestationResponse)
	err := grpc.Invoke(ctx, "/pb.WAVE/CreateAttestation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAVEClient) PublishEntity(ctx context.Context, in *PublishEntityParams, opts ...grpc.CallOption) (*PublishEntityResponse, error) {
	out := new(PublishEntityResponse)
	err := grpc.Invoke(ctx, "/pb.WAVE/PublishEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAVEClient) PublishAttestation(ctx context.Context, in *PublishAttestationParams, opts ...grpc.CallOption) (*PublishAttestationResponse, error) {
	out := new(PublishAttestationResponse)
	err := grpc.Invoke(ctx, "/pb.WAVE/PublishAttestation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAVEClient) AddAttestation(ctx context.Context, in *AddAttestationParams, opts ...grpc.CallOption) (*AddAttestationResponse, error) {
	out := new(AddAttestationResponse)
	err := grpc.Invoke(ctx, "/pb.WAVE/AddAttestation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAVEClient) LookupAttestations(ctx context.Context, in *LookupAttestationsParams, opts ...grpc.CallOption) (*LookupAttestationsResponse, error) {
	out := new(LookupAttestationsResponse)
	err := grpc.Invoke(ctx, "/pb.WAVE/LookupAttestations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAVEClient) ResyncPerspectiveGraph(ctx context.Context, in *ResyncPerspectiveGraphParams, opts ...grpc.CallOption) (*ResyncPerspectiveGraphResponse, error) {
	out := new(ResyncPerspectiveGraphResponse)
	err := grpc.Invoke(ctx, "/pb.WAVE/ResyncPerspectiveGraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAVEClient) SyncStatus(ctx context.Context, in *SyncParams, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := grpc.Invoke(ctx, "/pb.WAVE/SyncStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAVEClient) WaitForSyncComplete(ctx context.Context, in *SyncParams, opts ...grpc.CallOption) (WAVE_WaitForSyncCompleteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WAVE_serviceDesc.Streams[0], c.cc, "/pb.WAVE/WaitForSyncComplete", opts...)
	if err != nil {
		return nil, err
	}
	x := &wAVEWaitForSyncCompleteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WAVE_WaitForSyncCompleteClient interface {
	Recv() (*SyncResponse, error)
	grpc.ClientStream
}

type wAVEWaitForSyncCompleteClient struct {
	grpc.ClientStream
}

func (x *wAVEWaitForSyncCompleteClient) Recv() (*SyncResponse, error) {
	m := new(SyncResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for WAVE service

type WAVEServer interface {
	CreateEntity(context.Context, *CreateEntityParams) (*CreateEntityResponse, error)
	CreateAttestation(context.Context, *CreateAttestationParams) (*CreateAttestationResponse, error)
	PublishEntity(context.Context, *PublishEntityParams) (*PublishEntityResponse, error)
	PublishAttestation(context.Context, *PublishAttestationParams) (*PublishAttestationResponse, error)
	AddAttestation(context.Context, *AddAttestationParams) (*AddAttestationResponse, error)
	LookupAttestations(context.Context, *LookupAttestationsParams) (*LookupAttestationsResponse, error)
	ResyncPerspectiveGraph(context.Context, *ResyncPerspectiveGraphParams) (*ResyncPerspectiveGraphResponse, error)
	SyncStatus(context.Context, *SyncParams) (*SyncResponse, error)
	WaitForSyncComplete(*SyncParams, WAVE_WaitForSyncCompleteServer) error
}

func RegisterWAVEServer(s *grpc.Server, srv WAVEServer) {
	s.RegisterService(&_WAVE_serviceDesc, srv)
}

func _WAVE_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAVEServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WAVE/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAVEServer).CreateEntity(ctx, req.(*CreateEntityParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAVE_CreateAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttestationParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAVEServer).CreateAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WAVE/CreateAttestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAVEServer).CreateAttestation(ctx, req.(*CreateAttestationParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAVE_PublishEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishEntityParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAVEServer).PublishEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WAVE/PublishEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAVEServer).PublishEntity(ctx, req.(*PublishEntityParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAVE_PublishAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishAttestationParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAVEServer).PublishAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WAVE/PublishAttestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAVEServer).PublishAttestation(ctx, req.(*PublishAttestationParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAVE_AddAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAttestationParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAVEServer).AddAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WAVE/AddAttestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAVEServer).AddAttestation(ctx, req.(*AddAttestationParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAVE_LookupAttestations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupAttestationsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAVEServer).LookupAttestations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WAVE/LookupAttestations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAVEServer).LookupAttestations(ctx, req.(*LookupAttestationsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAVE_ResyncPerspectiveGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResyncPerspectiveGraphParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAVEServer).ResyncPerspectiveGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WAVE/ResyncPerspectiveGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAVEServer).ResyncPerspectiveGraph(ctx, req.(*ResyncPerspectiveGraphParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAVE_SyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAVEServer).SyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.WAVE/SyncStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAVEServer).SyncStatus(ctx, req.(*SyncParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAVE_WaitForSyncComplete_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WAVEServer).WaitForSyncComplete(m, &wAVEWaitForSyncCompleteServer{stream})
}

type WAVE_WaitForSyncCompleteServer interface {
	Send(*SyncResponse) error
	grpc.ServerStream
}

type wAVEWaitForSyncCompleteServer struct {
	grpc.ServerStream
}

func (x *wAVEWaitForSyncCompleteServer) Send(m *SyncResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _WAVE_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.WAVE",
	HandlerType: (*WAVEServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntity",
			Handler:    _WAVE_CreateEntity_Handler,
		},
		{
			MethodName: "CreateAttestation",
			Handler:    _WAVE_CreateAttestation_Handler,
		},
		{
			MethodName: "PublishEntity",
			Handler:    _WAVE_PublishEntity_Handler,
		},
		{
			MethodName: "PublishAttestation",
			Handler:    _WAVE_PublishAttestation_Handler,
		},
		{
			MethodName: "AddAttestation",
			Handler:    _WAVE_AddAttestation_Handler,
		},
		{
			MethodName: "LookupAttestations",
			Handler:    _WAVE_LookupAttestations_Handler,
		},
		{
			MethodName: "ResyncPerspectiveGraph",
			Handler:    _WAVE_ResyncPerspectiveGraph_Handler,
		},
		{
			MethodName: "SyncStatus",
			Handler:    _WAVE_SyncStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WaitForSyncComplete",
			Handler:       _WAVE_WaitForSyncComplete_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eapi.proto",
}

func init() { proto.RegisterFile("eapi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5b, 0x6f, 0x1b, 0xc5,
	0x17, 0xd7, 0xfa, 0x92, 0xd8, 0xc7, 0x4e, 0xea, 0x4e, 0xf2, 0x6f, 0x5d, 0xff, 0x4b, 0x08, 0x0b,
	0x02, 0x83, 0x20, 0xa2, 0x29, 0x85, 0x16, 0x81, 0x68, 0x68, 0x5c, 0x1a, 0x11, 0x89, 0x74, 0xdc,
	0x8b, 0x78, 0x41, 0x5a, 0xef, 0x4e, 0xea, 0xa5, 0xf6, 0xce, 0x32, 0x33, 0xb6, 0x30, 0x12, 0x1f,
	0x80, 0x17, 0xde, 0xf9, 0x04, 0x20, 0xf1, 0xc0, 0x17, 0xe0, 0x8b, 0x21, 0x5e, 0xd0, 0x5c, 0xd6,
	0x3b, 0x7b, 0x49, 0x6a, 0x1a, 0x9e, 0xbc, 0xe7, 0x77, 0xce, 0x9c, 0x39, 0xb7, 0x39, 0x73, 0xc6,
	0x00, 0xc4, 0x8b, 0xc3, 0xbd, 0x98, 0x51, 0x41, 0x51, 0x25, 0x1e, 0xb9, 0x7f, 0x3a, 0x80, 0xee,
	0x31, 0xe2, 0x09, 0x32, 0x88, 0x44, 0x28, 0x16, 0x27, 0x1e, 0xf3, 0xa6, 0x1c, 0x5d, 0x87, 0xe6,
	0xdc, 0x9b, 0x84, 0xc1, 0x7d, 0x46, 0xa7, 0x5d, 0x67, 0xd7, 0xe9, 0x57, 0x71, 0x0a, 0xa0, 0x1d,
	0x00, 0x45, 0x3c, 0x8e, 0x44, 0x38, 0xe9, 0x56, 0x14, 0xdb, 0x42, 0xd0, 0x27, 0x80, 0x18, 0x99,
	0x53, 0xdf, 0x13, 0x21, 0x8d, 0x8e, 0xcd, 0x6f, 0xb7, 0xba, 0xeb, 0xf4, 0x5b, 0xfb, 0xed, 0xbd,
	0x78, 0xb4, 0x97, 0x60, 0xb8, 0x44, 0x0e, 0xbd, 0x03, 0x9d, 0x21, 0xf1, 0x19, 0x11, 0x27, 0x1e,
	0xe7, 0xf1, 0x98, 0x79, 0x9c, 0x74, 0x6b, 0xbb, 0x4e, 0xbf, 0x89, 0x3b, 0x3c, 0x87, 0xbb, 0x1c,
	0xb6, 0x6d, 0xeb, 0x31, 0xe1, 0x31, 0x8d, 0x38, 0x41, 0xaf, 0x42, 0x9d, 0x30, 0x46, 0x99, 0xb2,
	0xbd, 0xb5, 0xdf, 0x94, 0x9b, 0x0e, 0x24, 0x80, 0x35, 0x2e, 0x1d, 0x3c, 0x99, 0x8d, 0x26, 0xa1,
	0x7f, 0x38, 0xc0, 0xca, 0x83, 0x36, 0x6e, 0xc6, 0x09, 0x20, 0xb9, 0xda, 0x04, 0xc9, 0xad, 0x6a,
	0x2e, 0x4f, 0x00, 0xf7, 0xb7, 0x0a, 0x5c, 0xd5, 0xbb, 0x1e, 0x08, 0x41, 0xb8, 0x50, 0x66, 0x9b,
	0xc0, 0xdd, 0x80, 0x56, 0x4c, 0x18, 0x8f, 0x89, 0x2f, 0xc2, 0x39, 0x31, 0xdb, 0x5f, 0x92, 0xdb,
	0x9f, 0xa4, 0x30, 0xb6, 0x65, 0x64, 0x34, 0x47, 0x34, 0x58, 0x0c, 0xfd, 0x31, 0x99, 0x12, 0x65,
	0x4b, 0x13, 0x5b, 0x08, 0xda, 0x85, 0x16, 0x9f, 0x8d, 0xbe, 0x25, 0xbe, 0x78, 0xe0, 0xf1, 0xb1,
	0x31, 0xc7, 0x86, 0xd0, 0x87, 0x70, 0xc9, 0x90, 0xcb, 0x60, 0xd7, 0x4a, 0x82, 0x9d, 0x17, 0xca,
	0x66, 0xb9, 0x7e, 0x7e, 0x96, 0xd7, 0x0a, 0x59, 0x76, 0x61, 0x2d, 0xa6, 0x93, 0xd0, 0x5f, 0x74,
	0xd7, 0xd5, 0x66, 0xa0, 0xbc, 0x54, 0x08, 0x36, 0x1c, 0xf7, 0x21, 0x5c, 0xc7, 0x84, 0x2f, 0x22,
	0xdf, 0xf2, 0xfe, 0x0b, 0xe6, 0xc5, 0xe3, 0x97, 0x0e, 0x97, 0x7b, 0x00, 0x3b, 0xe5, 0x2a, 0x57,
	0x4e, 0xbe, 0xfb, 0x19, 0xc0, 0x50, 0x2a, 0x78, 0x69, 0x1b, 0x7e, 0xaf, 0x40, 0x5b, 0x6a, 0x58,
	0xbd, 0xde, 0x8e, 0x60, 0x83, 0x0b, 0xca, 0xbc, 0x67, 0x64, 0x28, 0x3c, 0x31, 0xe3, 0xdd, 0xca,
	0x6e, 0xb5, 0xdf, 0xda, 0x7f, 0x5d, 0x0a, 0xda, 0x9a, 0xf6, 0x86, 0xb6, 0xd4, 0x20, 0x12, 0x6c,
	0x81, 0xb3, 0x2b, 0xd1, 0xbb, 0x70, 0x59, 0x50, 0xe1, 0x4d, 0xf4, 0xb2, 0xef, 0x66, 0x84, 0x0b,
	0xae, 0xaa, 0xa2, 0x8a, 0x8b, 0x0c, 0xf4, 0x26, 0x6c, 0xfa, 0x74, 0x1a, 0x4f, 0x88, 0x20, 0x81,
	0x64, 0x70, 0x55, 0x1a, 0x55, 0x9c, 0x43, 0x7b, 0x5f, 0x03, 0x2a, 0x6e, 0x8d, 0x3a, 0x50, 0x7d,
	0x4e, 0x16, 0xca, 0xab, 0x26, 0x96, 0x9f, 0xe8, 0x3d, 0xa8, 0xcf, 0xbd, 0xc9, 0x4c, 0x17, 0x6a,
	0x6b, 0xff, 0xaa, 0x72, 0x40, 0x2f, 0x3c, 0x64, 0xe1, 0x9c, 0x30, 0xbd, 0x1c, 0x6b, 0xa9, 0x8f,
	0x2b, 0xb7, 0x1d, 0xf7, 0x57, 0x07, 0xb6, 0x4a, 0x44, 0x64, 0x61, 0xd3, 0x98, 0x30, 0x55, 0x8b,
	0xde, 0x44, 0x6d, 0xd2, 0xc0, 0x36, 0x84, 0x6e, 0x41, 0x2d, 0x8c, 0x4e, 0xa9, 0x09, 0xd6, 0x6b,
	0x67, 0xec, 0xb5, 0x77, 0x14, 0x9d, 0x52, 0x1d, 0x2a, 0x25, 0xde, 0xfb, 0x08, 0x9a, 0x4b, 0xa8,
	0xc4, 0x85, 0x6d, 0xdb, 0x85, 0xa6, 0x6d, 0xe9, 0xcf, 0x0e, 0x5c, 0x2b, 0x9c, 0xec, 0xd5, 0x93,
	0xdc, 0x81, 0x6a, 0xda, 0x4e, 0xaa, 0xc1, 0x00, 0x4b, 0x17, 0xe7, 0x84, 0x85, 0xa7, 0x21, 0x61,
	0x5f, 0x92, 0x45, 0x72, 0x76, 0x2d, 0x48, 0x9e, 0xc1, 0x98, 0xd1, 0xb9, 0xe6, 0xd7, 0x4c, 0x23,
	0x4a, 0x00, 0xf7, 0x21, 0x6c, 0xa9, 0x36, 0xc5, 0xc7, 0x99, 0xf6, 0x6c, 0x36, 0x72, 0xd2, 0x8d,
	0xfa, 0xd0, 0x98, 0x24, 0x67, 0xbf, 0x52, 0x72, 0xf6, 0x97, 0x5c, 0xf7, 0x18, 0xfe, 0x97, 0x51,
	0xb9, 0xba, 0x7b, 0x08, 0x6a, 0x63, 0xd9, 0x81, 0xb4, 0x7f, 0xea, 0xdb, 0x7d, 0x02, 0x5d, 0xa3,
	0xad, 0xd8, 0x0b, 0x2f, 0x62, 0xe5, 0x43, 0xe8, 0x15, 0xf5, 0x5e, 0xcc, 0xd4, 0x05, 0x6c, 0x1f,
	0x04, 0xc1, 0x7f, 0xd2, 0xb2, 0x8b, 0x89, 0xce, 0xa4, 0xb1, 0x9a, 0x4f, 0xe3, 0x1d, 0xb8, 0x92,
	0xdd, 0x7a, 0xf5, 0x5e, 0xf5, 0x93, 0x03, 0xdd, 0x63, 0x4a, 0x9f, 0xcf, 0x62, 0x6b, 0x39, 0xbf,
	0xd0, 0x6d, 0x73, 0xca, 0xe8, 0x54, 0xe7, 0xde, 0x78, 0x60, 0x21, 0xa8, 0x07, 0x0d, 0x41, 0x0d,
	0x57, 0xfb, 0xb1, 0xa4, 0xdd, 0x31, 0xf4, 0x8a, 0xa6, 0xac, 0x9e, 0x94, 0xb7, 0x61, 0x9d, 0x11,
	0x3e, 0x9b, 0x88, 0xa4, 0xfb, 0x29, 0x4b, 0xed, 0xa8, 0x24, 0x7c, 0xf7, 0x16, 0xd4, 0x07, 0x49,
	0x22, 0x7d, 0x1a, 0x68, 0xd7, 0xea, 0x58, 0x7d, 0xa3, 0x2e, 0xac, 0x4f, 0x09, 0xe7, 0xde, 0xb3,
	0xe4, 0x04, 0x27, 0xa4, 0x3b, 0x85, 0x96, 0xe5, 0x38, 0xfa, 0x00, 0xda, 0x44, 0x59, 0xae, 0x2f,
	0x73, 0x63, 0x58, 0x47, 0x19, 0x66, 0xe1, 0x38, 0x23, 0xf5, 0x2f, 0x8a, 0xf4, 0x53, 0x68, 0x2c,
	0xef, 0xd2, 0x1b, 0xd0, 0x4a, 0xf0, 0xc7, 0xf8, 0xc8, 0x4e, 0xc5, 0x71, 0x0a, 0x63, 0x5b, 0xc6,
	0xbd, 0x03, 0x2d, 0x8b, 0x27, 0x8b, 0x2a, 0x59, 0xd9, 0xc4, 0xd5, 0x19, 0x3e, 0x92, 0x8e, 0xce,
	0x09, 0xe3, 0x89, 0x21, 0x75, 0x9c, 0x90, 0xee, 0x5d, 0x68, 0xdb, 0x1e, 0x94, 0x1c, 0xb5, 0x1d,
	0x80, 0x38, 0x9d, 0x9f, 0x4c, 0x9e, 0x53, 0x44, 0x5e, 0x61, 0x2d, 0x2b, 0xf4, 0x25, 0x1a, 0x4a,
	0xce, 0x10, 0x7a, 0x0b, 0x6a, 0x72, 0x32, 0x31, 0xb3, 0xdc, 0x56, 0x2e, 0x7f, 0x9f, 0xd3, 0x60,
	0x81, 0x95, 0x40, 0xbe, 0xf1, 0xd5, 0x5e, 0xd0, 0xf8, 0xea, 0xb9, 0x13, 0x93, 0x1f, 0x7a, 0xd6,
	0x56, 0x1a, 0x7a, 0xd6, 0x57, 0x19, 0x7a, 0x6e, 0x42, 0x43, 0x0d, 0x31, 0xb2, 0xc0, 0x1b, 0xe9,
	0x1d, 0x66, 0xb9, 0xf1, 0xc4, 0xb0, 0xf1, 0x52, 0xd0, 0xfd, 0xcb, 0x81, 0x4b, 0x39, 0x47, 0xe5,
	0xcd, 0x7a, 0x48, 0x64, 0x41, 0x06, 0x92, 0x4c, 0x83, 0xb7, 0x19, 0x64, 0x50, 0xe4, 0x42, 0xdb,
	0x53, 0x4b, 0x09, 0x7b, 0x90, 0xc6, 0x33, 0x83, 0xa1, 0xdb, 0xd0, 0x49, 0xe8, 0x73, 0xe7, 0xe5,
	0x82, 0x94, 0x35, 0x85, 0xd5, 0xce, 0x9a, 0xc2, 0x2e, 0x36, 0xe7, 0xb9, 0x7f, 0x3b, 0xb0, 0x55,
	0x12, 0x1d, 0x73, 0x8d, 0x86, 0x81, 0xb9, 0xb8, 0x35, 0x21, 0x6b, 0x56, 0xce, 0xf4, 0xcf, 0x49,
	0xa0, 0x1c, 0x6d, 0xe0, 0x84, 0x94, 0x1c, 0xf2, 0x7d, 0x1c, 0x32, 0x12, 0x28, 0xd7, 0x1a, 0x38,
	0x21, 0xa5, 0x7d, 0x53, 0x6f, 0x72, 0x4a, 0xd9, 0x94, 0x04, 0xca, 0x8d, 0x06, 0x4e, 0x01, 0x19,
	0xbf, 0x88, 0x8a, 0x43, 0xe2, 0xb3, 0x45, 0x2c, 0x48, 0xa0, 0x1c, 0x68, 0xe0, 0x0c, 0x26, 0x7d,
	0xe0, 0xcc, 0x3f, 0x8a, 0xb4, 0x41, 0x6b, 0x4a, 0xc2, 0x42, 0x24, 0x3f, 0xe0, 0x22, 0xe1, 0xaf,
	0x6b, 0x7e, 0x8a, 0xd8, 0x2d, 0xa5, 0x91, 0x6d, 0x29, 0x3f, 0xc2, 0x9a, 0x8e, 0x26, 0xba, 0x0b,
	0x1d, 0xc1, 0x66, 0x5c, 0x1c, 0x93, 0x39, 0x99, 0x68, 0xcc, 0x1c, 0xf3, 0x6d, 0x19, 0xf3, 0x47,
	0x39, 0x1e, 0x2e, 0x48, 0xcb, 0x1e, 0xc1, 0x1e, 0x31, 0x42, 0xcc, 0xe2, 0x4a, 0xda, 0x23, 0x70,
	0x0a, 0x63, 0x5b, 0xc6, 0xed, 0x43, 0x27, 0xaf, 0x58, 0x06, 0x5e, 0xa9, 0x36, 0x4d, 0x51, 0x13,
	0xee, 0x1f, 0x0e, 0xb4, 0x2c, 0x35, 0x32, 0xa8, 0x91, 0x37, 0x25, 0x3c, 0xf6, 0x7c, 0x62, 0x2a,
	0x33, 0x05, 0x64, 0x50, 0xc3, 0x28, 0x08, 0x99, 0xec, 0x94, 0x34, 0xe2, 0xca, 0x96, 0x0d, 0x9c,
	0xc1, 0xd0, 0x6d, 0x00, 0x99, 0x73, 0x32, 0x25, 0x91, 0x9a, 0x30, 0x65, 0xcb, 0xee, 0xe6, 0xac,
	0x1d, 0x26, 0x02, 0xd8, 0x92, 0x45, 0x6f, 0xc0, 0xc6, 0x3c, 0xe4, 0xe1, 0x28, 0x9c, 0x84, 0x62,
	0x21, 0x9b, 0x5a, 0x6d, 0xb7, 0xda, 0x6f, 0xe3, 0x2c, 0xe8, 0xfe, 0x00, 0xdb, 0x65, 0x9a, 0xe4,
	0xea, 0x98, 0xb0, 0x69, 0xc8, 0x65, 0xab, 0x1b, 0x9a, 0xbe, 0xdd, 0xc6, 0x59, 0x50, 0x76, 0x88,
	0x14, 0xd0, 0x37, 0x4a, 0x13, 0xdb, 0x90, 0xbc, 0xca, 0x18, 0xe1, 0x74, 0xc6, 0x7c, 0xa2, 0x2a,
	0xae, 0x89, 0x97, 0xf4, 0xfe, 0x2f, 0x75, 0xa8, 0x3d, 0x3d, 0x78, 0x32, 0x40, 0x77, 0xa1, 0x6d,
	0xbf, 0x20, 0xd1, 0x15, 0xe9, 0x60, 0xf1, 0x45, 0xdc, 0xeb, 0xe6, 0xf1, 0xe5, 0xbd, 0xf7, 0x15,
	0x5c, 0x2e, 0xcc, 0x8c, 0xe8, 0xff, 0xa9, 0x78, 0x61, 0xe2, 0xe8, 0xbd, 0x52, 0xca, 0x5c, 0x2a,
	0xbc, 0x07, 0x1b, 0x99, 0x09, 0x0d, 0xa9, 0x06, 0x55, 0x32, 0x07, 0xf6, 0xae, 0x15, 0x18, 0x4b,
	0x25, 0x18, 0x50, 0x71, 0x80, 0x42, 0xd7, 0xad, 0x05, 0x45, 0xbb, 0x76, 0xca, 0xb9, 0x4b, 0x9d,
	0xf7, 0x61, 0x33, 0x3b, 0xc6, 0x20, 0x15, 0x95, 0xb2, 0xa9, 0xaa, 0xd7, 0x2b, 0x72, 0x6c, 0xdb,
	0x8a, 0x73, 0x84, 0xb6, 0xed, 0xac, 0x51, 0x47, 0xdb, 0x76, 0xce, 0xf4, 0xf1, 0x0d, 0x5c, 0x29,
	0x7f, 0x16, 0xa2, 0x5d, 0x55, 0xb2, 0xe7, 0xbc, 0x42, 0x7b, 0xee, 0xd9, 0x12, 0x4b, 0xfd, 0x7b,
	0xfa, 0xcd, 0x68, 0x9e, 0x2e, 0x9b, 0xc9, 0xbb, 0xcd, 0x68, 0xe8, 0xe4, 0xdf, 0x71, 0xe8, 0x0e,
	0x6c, 0x3d, 0xf5, 0x42, 0x71, 0x9f, 0x32, 0x09, 0xdf, 0x33, 0x8f, 0xad, 0x17, 0x2f, 0x7c, 0xdf,
	0x19, 0xad, 0xa9, 0xbf, 0x67, 0x6e, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0xad, 0xab, 0x0e, 0x6d,
	0xac, 0x11, 0x00, 0x00,
}
