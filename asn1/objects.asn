WAVE-Schema DEFINITIONS::=
BEGIN

  DeclarationOfTrust ::= SEQUENCE {
      -- "1" for now
      version [0] IMPLICIT INTEGER,

      -- the recipient of the DOT
      subject [1] IMPLICIT EntityHash,

      -- an object that would indicate the DOT is revoked
      revocationCommitment [2] IMPLICIT RevocationCommitment,

      -- plaintext extensions
      publicExtensions [3] IMPLICIT SEQUENCE OF Extension,

      -- The result of decrypting value using the given algorithm and
      -- parameters should be a DOTBody object. The contents of the
      -- DOTBody object are allowed to differ depending on context
      -- of the decryption (for example the secrets field may be null)
      body [4] IMPLICIT DOTBodyCiphertext,

      -- A signature over the entire encoded dot. The algorithm
      -- and key used to generate this are specified in the body
      -- and must match what is specified here
      outerSignature [5] IMPLICIT OuterSignature
  }

  OuterSignature ::= SEQUENCE {
    algorithm [0] IMPLICIT OBJECT IDENTIFIER,
    verifyingKey [1] IMPLICIT OCTET STRING,
    parameters [2] EXPLICIT ANY DEFINED BY algorithm OPTIONAL,
    value [3] IMPLICIT OCTET STRING
  }

  DOTBodyCiphertext ::= SEQUENCE {
    algorithm [0] IMPLICIT OBJECT IDENTIFIER,
    parameters [1] EXPLICIT ANY DEFINED BY algorithm OPTIONAL,
    value [2] IMPLICIT OCTET STRING
  }

  -- Irrespective of the algorithm used to encrypt the body, this
  -- is the object it contains
  DOTBody ::= SEQUENCE {
    forProver [0] IMPLICIT DOTProverBody,

    forVerifier [1] IMPLICIT DOTVerifierBody

  }
  DOTProverBody ::= SEQUENCE {
    -- private extensions for the prover
    extensions [0] IMPLICIT SEQUENCE OF Extension
  }

  DOTVerifierBody ::= SEQUENCE {
    -- the creator of the DOT
    attester [0] IMPLICIT EntityHash,
    -- the recipient of the trust
    subject [1] IMPLICIT EntityHash,
    -- the policy domain. If omitted, the policy is global
    namespace [2] IMPLICIT EntityHash OPTIONAL,
    -- when is this trust valid
    validity [3] IMPLICIT SEQUENCE {
      notBefore [0] IMPLICIT UTCTime,
      notAfter [1] IMPLICIT UTCTime
    },
    -- this ensures that the outer layer (plaintext fields)
    -- has not been tampered with. The nature of this key
    outerSignatureParameters [4] IMPLICIT OuterSignatureParameters,

    -- the nature of the trust
    policy [5] IMPLICIT Policy,

    -- any private extensions for the verifier
    extensions [6] IMPLICIT SEQUENCE OF Extension,

    -- signature over the ephemeral public key used for the
    -- outer signature
    innerSignature [7] IMPLICIT InnerSignature
  }

  Policy ::= SEQUENCE {
      scheme [0] IMPLICIT OBJECT IDENTIFIER,
      -- DER encoding of ASN.1 value identified by scheme
      value [1] IMPLICIT OCTET STRING
  }

  OuterSignatureParameters ::= SEQUENCE {
      algorithm [0] IMPLICIT OBJECT IDENTIFIER,
      parameters [1] EXPLICIT ANY DEFINED BY algorithm OPTIONAL,
      key [2] IMPLICIT OCTET STRING
  }

  InnerSignature ::= SEQUENCE {
      algorithm [0] IMPLICIT OBJECT IDENTIFIER,
      parameters [1] EXPLICIT ANY DEFINED BY algorithm OPTIONAL,
      value [2] IMPLICIT OCTET STRING
  }

  Location ::= SEQUENCE {
    scheme [0] IMPLICIT OBJECT IDENTIFIER,
    value [1] IMPLICIT OCTET STRING
  }

  Extension ::= SEQUENCE {
    extnID [0] IMPLICIT OBJECT IDENTIFIER,
    critical [1] IMPLICIT BOOLEAN DEFAULT FALSE,
    -- DER encoding of ASN.1 value identified by extnID
    value [2] IMPLICIT OCTET STRING
  }
  EntityHash ::= SEQUENCE {
    scheme [0] IMPLICIT OBJECT IDENTIFIER,
    hash [1] IMPLICIT OCTET STRING
  }

  RevocationCommitment ::= SEQUENCE {
    canonicalLocations [0] IMPLICIT SEQUENCE OF Location,
    scheme [1] IMPLICIT OBJECT IDENTIFIER,
    parameters [2] EXPLICIT ANY DEFINED BY scheme OPTIONAL,
    value [3] IMPLICIT OCTET STRING
  }

  Entity ::= SEQUENCE {

  }

  wave-id OBJECT IDENTIFIER ::= { 1 3 6 1 4 1 5000 }

  wave-schemes OBJECT IDENTIFIER ::= { wave-id 2 }
  entity-hash-id  OBJECT IDENTIFIER ::= { wave-schemes 1 }
  revocation-scheme-id  OBJECT IDENTIFIER ::= { wave-schemes 2 }
  body-scheme-id  OBJECT IDENTIFIER ::= { wave-schemes 3 }
  location-scheme-id OBJECT IDENTIFIER ::= { wave-schemes 4 }

  -- Objects defined by the reference crypto scheme
  -- WAVE Reference 1 (WR1)

  -- keccak256, not sha3, for interoperability with ethereum / swarm
  entity-hash-keccak-256 OBJECT IDENTIFIER ::=  { entity-hash-id 1 }
  -- this means that any object hashing to the same hash is considered
  -- as a revocation of the given DOT or Entity
  revocation-scheme-keccak-256 OBJECT IDENTIFIER ::= { revocation-scheme-id 1 }
  -- this means the body of the dot is encrypted using OAQUE
  body-scheme-oaque-bn256 OBJECT IDENTIFIER ::=  { body-scheme-id 1 }

  -- this means the location is defined by a URL
  location-scheme-url OBJECT IDENTIFIER ::= { location-scheme-id 1 }
  -- this means the location is defined by an ethereum block chain
  location-scheme-ethereum OBJECT IDENTIFIER ::= { location-scheme-id 2 }

  -- this object will be DER encoded and present in the location.value scheme
  -- when the scheme is location-scheme-url
  LocationURL ::= SEQUENCE {
    value [0] IMPLICIT UTF8String
  }

  -- this object will be DER encoded and present in the location.value scheme
  -- when the scheme is location-scheme-ethereum
  LocationEthereum ::= SEQUENCE {
    chainID [0] IMPLICIT INTEGER,
    contractAddress [1] IMPLICIT INTEGER
  }

  WR1BodyCiphertext ::= SEQUENCE {
    -- content: WR1VerifierBody DER encoded
    -- encryption algorithm: AES128
    -- key: verifierBodyKey
    verifierBodyCiphertext [0] IMPLICIT OCTET STRING,

    -- content: WR1ProverBody DER encoded
    -- encryption algorithm: AES128
    -- key: proverBodyKey
    proverBodyCiphertext [1] IMPLICIT OCTET STRING,

    -- content WR1Envelope DER encoded
    -- encryption algorithm: AES128
    -- key: envelopeKey
    envelopeCiphertext [2] IMPLICIT OCTET STRING,

    -- content evelopeBodyKey
    -- encryption algorithm: IBE-bn256 in subject system
    -- id: envelopeID (namespace)
    envelopeKey-ibe-bn256 [3] IMPLICIT OCTET STRING,

    -- content envelopeBodyKey
    -- encryption algorithm: AES128
    -- key: ECDH (outer signature key, subject key)
    -- this permits reading the envelope if you are the direct
    -- recipient, even without knowing the namespace
    envelopeKey-curve25519 [4] IMPLICIT OCTET STRING
  }

  WR1Envelope ::= SEQUENCE {
    -- content: verifierBodyKey
    -- encryption algorithm: oaque-bn256 in subject system
    -- encryption id: Partition
    verifierBodyKey-oaque [0] IMPLICIT OCTET STRING,

    -- the ID for the verifierBodyKey-oaque ciphertext
    partition [1] IMPLICIT SEQUENCE OF OCTET STRING
  }

  WR1ProverBody ::= SEQUENCE {
    extensions [0] IMPLICIT SEQUENCE OF Extension
  }

  WR1VerifierBody ::= SEQUENCE {
    dotVerifierBody [0] IMPLICIT DOTVerifierBody
  }


END
