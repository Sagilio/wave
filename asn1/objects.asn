WAVE-Schema DEFINITIONS ::=
BEGIN

  -- When saved in a file or sent over the wire, wrap the object with a
  -- type identifier
  WaveWireObject ::= INSTANCE OF TYPE-IDENTIFIER ({WaveObjects})

  -- A set of policy statements about an Entity, potentially granting
  -- permissions or establishing facts
  WaveAttestation ::= SEQUENCE {

      -- the subject of the attestation, who is receiving permissions or
      -- having a property attested to
      subject EntityHash,

      -- how this attestation revoked
      revocations SEQUENCE OF RevocationOption,

      -- extensions that are visible without any decryption of the
      -- attestation
      publicExtensions SEQUENCE OF Extension,

      -- The main content of the attestation SHOULD be encrypted using
      -- a scheme that permits provers and verifiers to decrypt it but
      -- nobody else. The result of decrypting this MUST be an
      -- AttestationBody object but depending on the context of the
      -- decryption (e.g prover vs verifier) the contents of that
      -- AttestationBody object may differ.
      body INSTANCE OF TYPE-IDENTIFIER ({AttestationBodySchemes}),

      -- The attestation is signed with an ephemeral signing key generated
      -- for a single use (or another signature scheme suitable for single
      -- use is permitted). The fingerprint of this signature scheme and
      -- its parameters is put inside the AttestationBody so that if this
      -- outer layer is modified, this can be detected after decrypting the
      -- attestation, but we also do not reveal the real verifying key of
      -- the source entity except to those who can decrypt the Attestation.
      -- The Value field must be set to the algorithm's NULL value (likely
      -- a zero length string) when calculating the signature.
      outerSignature INSTANCE OF TYPE-IDENTIFIER ({OuterSignatureSchemes})
  }

  -- Irrespective of the algorithm used to encrypt the body, this
  -- is the object it contains
  AttestationBody ::= SEQUENCE {

    -- These are fields visible to both prover and verifier
    forVerifier AttestationVerifierBody,

    -- Material relating to the policy scheme that is only visible
    -- to the prover. When decoding as a verifier, this should not be
    -- visible
    proverPolicyAddendums SEQUENCE OF INSTANCE OF TYPE-IDENTIFIER ({PolicyAddendumSchemes}),

    -- These are fields that contain information that should be
    -- visible to the subject of the Attestation (and perhaps
    -- chained attestation subjects) but should not be visible to those
    -- verifying this attestation as part of a proof.
    forProver SEQUENCE {
      extensions SEQUENCE OF Extension
    }

  }


  -- These are fields visible to both prover and verifier
  AttestationVerifierBody ::= SEQUENCE {
    -- the creator of the DOT
    attester EntityHash,
    -- the subject of the attestation
    subject EntityHash,
    -- the policy domain. If omitted, the policy is global. A policy domain
    -- is an Entity that represents the scope of the attestation. The exact
    -- semantics are specific to the scheme
    -- TODO then I think we should just omit this and put it inside the policy
    -- domain EntityHash OPTIONAL,

    -- when is this trust valid
    validity SEQUENCE {
      notBefore UTCTime,
      notAfter UTCTime
    },

    -- the nature of the trust
    policy INSTANCE OF TYPE-IDENTIFIER ({PolicySchemes}),

    -- extensions for use by the verifier
    extensions SEQUENCE OF Extension,

    -- binding that proves that the outer signature is made by the same
    -- key that the source used (the ephemeral keys have not been switched)
    outerSignatureBinding INSTANCE OF TYPE-IDENTIFIER ({OuterSignatureBindingSchemes})
  }

  Location ::= INSTANCE OF TYPE-IDENTIFIER ({LocationSchemes})

  Extension ::= SEQUENCE {
    extnID OBJECT IDENTIFIER,
    -- should parsing of the object fail if this extension is not understood
    critical BOOLEAN DEFAULT FALSE,
    -- DER encoding of ASN.1 value identified by extnID
    value OCTET STRING
  }

  Hash ::= INSTANCE OF TYPE-IDENTIFIER ({HashSchemes})
  EntityHash ::= Hash
  AttestationHash ::= Hash

  RevocationOption ::= SEQUENCE {
    -- If this revocation scheme is not understood, should
    -- the object be treated as revoked (TRUE) or not (FALSE)
    critical BOOLEAN,
    scheme INSTANCE OF TYPE-IDENTIFIER ({RevocationSchemes})
  }

  WaveEntity ::= SEQUENCE {
    tbs SEQUENCE {
      -- the canonical certification and attestation key. This is what is used
      -- to sign attestation outerSignatureBindings, and to sign this object
      verifyingKey EntityPublicKey,
      -- other public keys
      keys SEQUENCE OF EntityPublicKey,
      -- when is this entity valid
      validity SEQUENCE {
        notBefore UTCTime,
        notAfter UTCTime
      },
      -- revocations
      revocations SEQUENCE OF RevocationOption,
      -- extensions
      extensions SEQUENCE OF Extension
    },
    -- the algorithm is determined by the type of
    -- verifyingKey
    signature OCTET STRING
  }

  WaveEntitySecret ::= SEQUENCE {
    entity WaveEntity,

    keyring INSTANCE OF TYPE-IDENTIFIER ({EntityKeyringSchemes})
  }

  EntityKeyring ::= SEQUENCE {
    keys SEQUENCE OF SEQUENCE {
      public EntityPublicKey,
      secret EntityPrivateKey
    }
  }

  EntityPrivateKey ::= INSTANCE OF TYPE-IDENTIFIER ({EntitySecretKeySchemes})

  EntityPublicKey ::= SEQUENCE {
    capabilityFlags SET OF Capability,
    key INSTANCE OF TYPE-IDENTIFIER ({EntityKeySchemes})
  }

  Capability ::= INTEGER {
    -- signing other keys
    certification      (1),
    -- signing attestations
    attestation        (2),
    -- signing messages or other content
    signing            (3),
    -- signing challenges that reveal ID
    authentication     (4),
    -- signing challenges that prove authorization (not via identity)
    authorization      (5),
    --
    encryption         (6)
  }

  -- there are different kinds of proofs, this represents just one, the
  -- explicit proof that reveals the attestations. The final authorization
  -- or truth conveyed is the union of the paths through the given set of
  -- attestations
  WaveExplicitProof ::= SEQUENCE {
    waveObjectVersion OBJECT IDENTIFIER,
    attestations SEQUENCE OF AttestationReference,
    paths SEQUENCE OF AttestationChain,
    extensions SEQUENCE OF Extension
  }

  -- this is a chain of attestations connected end-to-end
  -- that represent a path through the subset of the authorization
  -- graph given in the attestations field
  AttestationChain ::= SEQUENCE {
    path SEQUENCE OF AttestationHash
  }

  AttestationReference ::= SEQUENCE {
    -- the hash of the WaveAttestation
    hash AttestationHash,

    -- generally the attestation is put in here verbatim
    content [0] WaveAttestation OPTIONAL,

    -- or a location is given that permits retrieving the attestation
    location [1] Location OPTIONAL,

    -- the content will generally need some keys to decrypt
    keys [2] SEQUENCE OF AttestationVerifierKey,

    -- for some revocation schemes, it may be necessary to submit
    -- additional information with the attestation reference that shows
    -- that the attestation is not revoked (such as a signed object by
    -- the locations in the revocation option)
    revocationChecks [3] SEQUENCE OF RevocationCheck,

    extensions [4] SEQUENCE OF Extension
  }

  AttestationVerifierKey ::= INSTANCE OF TYPE-IDENTIFIER ({AttestationVerifierKeySchemes})

  RevocationCheck ::= INSTANCE OF TYPE-IDENTIFIER ({RevocationCheckSchemes})


  RTreePolicy ::= SEQUENCE {
    namespace EntityHash,
    -- Similar to bosswave TTL, how many times can this be redelegated
    indirections INTEGER,
    statements SEQUENCE OF RTreeStatement
  }

  RTreeStatement ::= SEQUENCE {
    permissionSet EntityHash,
    permission UTF8String,
    resource UTF8String,
    comment UTF8String OPTIONAL
  }


  -- this object will be DER encoded and present in the location.value scheme
  -- when the scheme is location-scheme-url
  LocationURL ::= SEQUENCE {
    value UTF8String
  }

  -- this object will be DER encoded and present in the location.value scheme
  -- when the scheme is location-scheme-ethereum-blockchain
  LocationEthereum ::= SEQUENCE {
    chainID INTEGER,
    contractAddress INTEGER
  }


  WR1BodyCiphertext ::= SEQUENCE {
    -- content: WR1VerifierBody DER encoded
    -- encryption algorithm: AES128
    -- key: verifierBodyKey
    verifierBodyCiphertext OCTET STRING,

    -- content: WR1ProverBody DER encoded
    -- encryption algorithm: AES128
    -- key: proverBodyKey
    proverBodyCiphertext OCTET STRING,

    -- content WR1Envelope DER encoded
    -- encryption algorithm: AES128
    -- key: envelopeKey
    envelopeCiphertext OCTET STRING,

    -- content envelopeBodyKey
    -- encryption algorithm: IBE-bn256 in subject system
    -- id: envelopeID (namespace)
    envelopeKey-ibe-bn256 OCTET STRING,

    -- content envelopeBodyKey
    -- encryption algorithm: AES128
    -- key: ECDH (outer signature key, subject key)
    -- this permits reading the envelope if you are the direct
    -- recipient, even without knowing the namespace
    envelopeKey-curve25519 OCTET STRING
  }

  WR1Envelope ::= SEQUENCE {
    -- content: verifierBodyKey
    -- encryption algorithm: oaque-bn256 in subject system
    -- encryption id: Partition
    verifierBodyKey-oaque OCTET STRING,

    -- the ID for the verifierBodyKey-oaque ciphertext
    partition SEQUENCE OF OCTET STRING
  }

  WR1ProverBody ::= SEQUENCE {
    addendum WR1KeyMaterial
  }

  WR1KeyMaterial ::= SEQUENCE {

  }

  WR1VerifierBody ::= SEQUENCE {
    attestationVerifierBody AttestationVerifierBody
  }

  HashSha3-256 ::= OCTET STRING
  HashKeccak-256 ::= OCTET STRING

  Ed25519OuterSignature ::= SEQUENCE {
    verifyingKey OCTET STRING,
    signature OCTET STRING
  }

  SignedOuterKey ::= SEQUENCE {
    tbs SEQUENCE {
      outerSignatureScheme OBJECT IDENTIFIER,
      verifyingKey OCTET STRING
    },
    signature OCTET STRING
  }

  TrustLevel ::= SEQUENCE {
    trust INTEGER (1..4)
  }

  CommitmentRevocationOption ::= SEQUENCE {
    -- What the commitment should hash to
    hash Hash,
    -- Where to look for it
    location Location
  }

  --Entity keys, none of these have special structure
  Ed25519Key ::= OCTET STRING
  Curve25519Key ::= OCTET STRING
  OAQUE-BN256-S20 ::= OCTET STRING
  AVKeyAES128-GCM ::= OCTET STRING

--------------------------------------------------------------------------------
-- Universal OIDs
--------------------------------------------------------------------------------
wave-id OBJECT IDENTIFIER ::= { 1 3 6 1 4 1 51157 }

-- Wave object types
--------------------------------------------------------------------------------
wave-object OBJECT IDENTIFIER ::= { wave-id 2 }
attestation-id OBJECT IDENTIFIER ::= { wave-object 1 }
entity-id OBJECT IDENTIFIER ::= { wave-object 2 }
explicit-proof-id OBJECT IDENTIFIER ::= { wave-object 3 }
WaveObjects TYPE-IDENTIFIER ::= {
  {WaveAttestation IDENTIFIED BY attestation-id} |
  {WaveEntity IDENTIFIED BY entity-id} |
  {WaveExplicitProof IDENTIFIED BY explicit-proof-id},
...
}

-- Attestation body schemes
--------------------------------------------------------------------------------
attestation-body-scheme OBJECT IDENTIFIER ::= { wave-id 3 }
unencrypted-body-scheme OBJECT IDENTIFIER ::= { attestation-body-scheme 1 }
wr1-body-scheme-v1 OBJECT IDENTIFIER ::= { attestation-body-scheme 2 }

AttestationBodySchemes TYPE-IDENTIFIER ::= {
 {AttestationBody IDENTIFIED BY unencrypted-body-scheme} |
 {WR1BodyCiphertext IDENTIFIED BY wr1-body-scheme-v1},
 ...
}

-- Attestation Verifier Key Schemes
--------------------------------------------------------------------------------
attestation-verifier-key-scheme OBJECT IDENTIFIER ::= { wave-id 4 }
attestation-verifier-key-aes128-gcm OBJECT IDENTIFIER ::= { attestation-verifier-key-scheme 1 }
AttestationVerifierKeySchemes TYPE-IDENTIFIER ::= {
 {AVKeyAES128-GCM IDENTIFIED BY attestation-verifier-key-aes128-gcm},
 ...
}

-- Outer signature schemes
--------------------------------------------------------------------------------
outer-signature-scheme OBJECT IDENTIFIER ::= { wave-id 5 }
ephemeral-ed25519 OBJECT IDENTIFIER ::= { outer-signature-scheme 1 }
OuterSignatureSchemes TYPE-IDENTIFIER ::= {
 {Ed25519OuterSignature IDENTIFIED BY ephemeral-ed25519},
 ...
}



-- Outer signature binding schemes
--------------------------------------------------------------------------------
outer-signature-binding-scheme OBJECT IDENTIFIER ::= { wave-id 6 }
signed-outer-key OBJECT IDENTIFIER ::= { outer-signature-binding-scheme 1 }
OuterSignatureBindingSchemes TYPE-IDENTIFIER ::= {
 {SignedOuterKey IDENTIFIED BY signed-outer-key},
 ...
}

-- Revocation check schemes
--------------------------------------------------------------------------------
revocation-check-schemes OBJECT IDENTIFIER ::= { wave-id 7 }
RevocationCheckSchemes TYPE-IDENTIFIER ::= {
  ...
}

-- Location schemes
--------------------------------------------------------------------------------
location-scheme OBJECT IDENTIFIER ::= { wave-id 8 }
location-url-id OBJECT IDENTIFIER ::= { location-scheme 1 }
location-ethereum-v1-id OBJECT IDENTIFIER ::= { location-scheme 2 }
LocationSchemes TYPE-IDENTIFIER ::= {
  {LocationURL IDENTIFIED BY location-url-id} |
  {LocationEthereum IDENTIFIED BY location-ethereum-v1-id},
  ...
}

-- Hash schemes
--------------------------------------------------------------------------------
hash-scheme OBJECT IDENTIFIER ::= { wave-id 9 }
sha3-256-id OBJECT IDENTIFIER ::= { hash-scheme 1 }
keccack-256-id OBJECT IDENTIFIER ::= { hash-scheme 2 }
HashSchemes TYPE-IDENTIFIER ::= {
  {HashSha3-256 IDENTIFIED BY sha3-256-id} |
  {HashKeccak-256 IDENTIFIED BY keccack-256-id},
  ...
}

-- Revocation option schemes
--------------------------------------------------------------------------------
revocation-scheme OBJECT IDENTIFIER ::= { wave-id 10 }
commitment-revocation-id OBJECT IDENTIFIER ::= { revocation-scheme 1 }
RevocationSchemes TYPE-IDENTIFIER ::= {
  {CommitmentRevocationOption IDENTIFIED BY commitment-revocation-id},
  ...
}

-- Entity public key schemes
--------------------------------------------------------------------------------
entity-key-scheme OBJECT IDENTIFIER ::= { wave-id 11 }
ed25519-id OBJECT IDENTIFIER ::= { entity-key-scheme 1 }
curve25519-id OBJECT IDENTIFIER ::= { entity-key-scheme 2 }
oaque-bn256-s20-attributeset-id OBJECT IDENTIFIER ::= { entity-key-scheme 3 }
oaque-bn256-s20-params-id OBJECT IDENTIFIER ::= { entity-key-scheme 4 }
EntityKeySchemes TYPE-IDENTIFIER ::= {
  {OCTET STRING IDENTIFIED BY ed25519-id} |
  {OCTET STRING IDENTIFIED BY curve25519-id} |
  {OCTET STRING IDENTIFIED BY oaque-bn256-s20-attributeset-id} |
  {OCTET STRING IDENTIFIED BY oaque-bn256-s20-params-id},
  ...
}

-- Policy schemes
--------------------------------------------------------------------------------
policy-scheme OBJECT IDENTIFIER ::= { wave-id 12 }
trust-level OBJECT IDENTIFIER ::= { policy-scheme 1 }
resource-tree OBJECT IDENTIFIER ::= { policy-scheme 2 }
PolicySchemes TYPE-IDENTIFIER ::= {
  {TrustLevel IDENTIFIED BY trust-level} |
  {RTreePolicy IDENTIFIED BY resource-tree},
  ...
}

-- Policy addendum schemes
--------------------------------------------------------------------------------
policy-addendum-scheme OBJECT IDENTIFIER ::= { wave-id 13 }
wr1-key-material-id OBJECT IDENTIFIER ::= { policy-addendum-scheme 1 }
PolicyAddendumSchemes TYPE-IDENTIFIER ::= {
  {WR1KeyMaterial IDENTIFIED BY wr1-key-material-id},
  ...
}


-- Entity secret key schemes
--------------------------------------------------------------------------------
entity-secret-key-scheme OBJECT IDENTIFIER ::= { wave-id 14 }
ed25519-secret-id OBJECT IDENTIFIER ::= { entity-secret-key-scheme 1 }
curve25519-secret-id OBJECT IDENTIFIER ::= { entity-secret-key-scheme 2 }
oaque-bn256-s20-private-key-id OBJECT IDENTIFIER ::= { entity-secret-key-scheme 3 }
oaque-bn256-s20-master-key-id OBJECT IDENTIFIER ::= { entity-secret-key-scheme 4 }
EntitySecretKeySchemes TYPE-IDENTIFIER ::= {
  {OCTET STRING IDENTIFIED BY ed25519-secret-id} |
  {OCTET STRING IDENTIFIED BY curve25519-secret-id} |
  {OCTET STRING IDENTIFIED BY oaque-bn256-s20-private-key-id} |
  {OCTET STRING IDENTIFIED BY oaque-bn256-s20-master-key-id},
  ...
}

-- Entity keyring schemes
--------------------------------------------------------------------------------
entity-keyring-scheme OBJECT IDENTIFIER ::= { wave-id 15 }
plaintext-keyring-id OBJECT IDENTIFIER ::= { entity-keyring-scheme 1 }
aes128-gcm-pbkdf2 OBJECT IDENTIFIER ::= { entity-keyring-scheme 2 }
EntityKeyringSchemes TYPE-IDENTIFIER ::= {
  {EntityKeyring IDENTIFIED BY ed25519-secret-id} |
  {OCTET STRING IDENTIFIED BY aes128-gcm-pbkdf2},
  ...
}

END
