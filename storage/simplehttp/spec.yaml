swagger: "2.0"
info:
  description: "This is the API for URL Location Scheme v1"
  version: "1.0.0"
  title: "SimpleHTTP - LocationScheme URL v1"
host: "my.wave.provider"
basePath: "/v1"
schemes:
- "http"
paths:
  /obj:
    post:
      summary: "Add a new object"
      description: "Adds a new DER encoded WaveObject to the store"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DER encoded WaveObject"
        required: true
        schema:
          $ref: "#/definitions/NewObjectParameters"
      responses:
        200:
          description: "Valid input"
          schema:
            $ref: "#/definitions/NewObjectResponse"
        400:
          description: "Invalid input"
        500:
          description: "Server error"
  /obj/{hash}:
    get:
      summary: "Get an object by hash"
      description: "Retrieves a DER encoded WaveObject by hash"
      produces:
      - "application/json"
      parameters:
      - name: "hash"
        in: "path"
        description: "Base64 encoding of a Keccak256 hash returned by POST /obj"
        required: true
        type: "string"
        format: "byte"
      responses:
        404:
          description: "No such object exists"
          schema:
            $ref: "#/definitions/GetObjectResponse"
        200:
          description: "Object found"
          schema:
            $ref: "#/definitions/GetObjectResponse"
        500:
          description: "Server error"
  /queue/{id}:
    post:
      summary: "Enqueue an object notification"
      description: "Places the given hash in the given queue"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Base64 encoding of a Keccak256 hash identifying the queue"
        required: true
        type: "string"
        format: "byte"
      - name: "content"
        in: ""
    put:
      tags:
      - "pet"
      summary: "Update an existing pet"
      description: ""
      operationId: "updatePet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
